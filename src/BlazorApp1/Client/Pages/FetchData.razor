@page "/fetchdata"
@using BlazorApp1.Shared.WeatherForecast.Models;
@using BlazorApp1.Shared.WeatherForecast;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using BlazorApp1.Shared
@using BlazorApp1.Client.Objects
@attribute [Authorize]
@inject HttpClient Http

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (_forecasts.Count == 0)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in _forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private readonly List<WeatherForecast> _forecasts = new List<WeatherForecast>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var logic = new WeatherForecastLogic();

            WeatherForecastDto[] forecastsDtos = logic.GetWeatherForecast().ToArray();

            foreach (WeatherForecastDto weatherForecastDto in forecastsDtos)
            {
                _forecasts.Add(new WeatherForecast()
                {
                    Date = weatherForecastDto.Date,
                    Summary = weatherForecastDto.Summary,
                    TemperatureC = weatherForecastDto.TemperatureC
                });
            }
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}
